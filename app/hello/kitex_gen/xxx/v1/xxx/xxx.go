// Code generated by Kitex v0.4.3. DO NOT EDIT.

package xxx

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	v1 "xxx/kitex_gen/xxx/v1"
)

func serviceInfo() *kitex.ServiceInfo {
	return xXXServiceInfo
}

var xXXServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "XXX"
	handlerType := (*v1.XXX)(nil)
	methods := map[string]kitex.MethodInfo{
		"XXX": kitex.NewMethodInfo(xXXHandler, newXXXXXXArgs, newXXXXXXResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "v1",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.3",
		Extra:           extra,
	}
	return svcInfo
}

func xXXHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*v1.XXXXXXArgs)
	realResult := result.(*v1.XXXXXXResult)
	success, err := handler.(v1.XXX).XXX(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newXXXXXXArgs() interface{} {
	return v1.NewXXXXXXArgs()
}

func newXXXXXXResult() interface{} {
	return v1.NewXXXXXXResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) XXX(ctx context.Context, req *v1.Request) (r *v1.Response, err error) {
	var _args v1.XXXXXXArgs
	_args.Req = req
	var _result v1.XXXXXXResult
	if err = p.c.Call(ctx, "XXX", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
